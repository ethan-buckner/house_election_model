eval_diff = eval_predictions - evaluation$avg_salary
eval_tss = sum((evaluation$avg_salary - mean(evaluation$avg_salary))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
ggplotly(ggplot(mapping = aes(x = training$Sector, y = train_predictions)) + geom_bar(stat = 'identity'))
model = lm(avg_salary~Sector+Rating, data = training)
train_predictions = predict(model, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(model, evaluation)
eval_diff = eval_predictions - evaluation$avg_salary
eval_tss = sum((evaluation$avg_salary - mean(evaluation$avg_salary))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
ggplotly(ggplot(mapping = aes(x = training$Sector, y = train_predictions)) + geom_bar(stat = 'identity'))
model = lm(avg_salary~., data = training)
train_predictions = predict(model, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(model, evaluation)
eval_diff = eval_predictions - evaluation$avg_salary
eval_tss = sum((evaluation$avg_salary - mean(evaluation$avg_salary))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
ggplotly(ggplot(mapping = aes(x = training$Sector, y = train_predictions)) + geom_bar(stat = 'identity'))
cart = rpart(wages$avg_salary~Sector, data = training)
cart = rpart(avg_salary~Sector, data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$Price
train_tss = sum((training$Price - mean(training$Price))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
eval_diff = eval_predictions - evaluation$Price
eval_tss = sum((evaluation$Price - mean(evaluation$Price))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
wages = read.csv('wages_hw.csv')
# wages$Sector = as.factor(wages$Sector)
wages
eightypercent = nrow(wages) * .8
training = wages[sample(nrow(wages), eightypercent), ]
evaluation = setdiff(wages, training)
cart = rpart(avg_salary~Sector, data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$Price
train_tss = sum((training$Price - mean(training$Price))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
cart = rpart(avg_salary~Sector, data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$Price
train_tss = sum((training$Price - mean(training$Price))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
wages = read.csv('wages_hw.csv')
# wages$Sector = as.factor(wages$Sector)
wages
eightypercent = nrow(wages) * .8
training = wages[sample(nrow(wages), eightypercent), ]
evaluation = setdiff(wages, training)
cart = rpart(avg_salary~Sector, data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$Price
train_tss = sum((training$Price - mean(training$Price))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
eval_diff = eval_predictions - evaluation$Price
eval_tss = sum((evaluation$Price - mean(evaluation$Price))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
cart = rpart(training$avg_salary~training$Sector, data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$Price
train_tss = sum((training$Price - mean(training$Price))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
eval_diff = eval_predictions - evaluation$Price
eval_tss = sum((evaluation$Price - mean(evaluation$Price))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
knitr::opts_chunk$set(echo = TRUE) # This line makes all your code visible
library('ggplot2')
library('plotly')
cars = read.csv('cars_hw.csv')
cars
ggplot(cars, aes(x = Price)) + geom_density()
sort(tapply(cars$Price, cars$Make, mean))
ggplot(cars, aes(x = Price, group = Make, color = Make)) + geom_density(alpha = .4)
eightypercent = nrow(cars) * .8
training = cars[sample(nrow(cars), eightypercent), ]
evaluation = setdiff(cars, training)
model = lm(Price~., data = training)
train_predictions = predict(model, training)
train_diff = train_predictions - training$Price
train_tss = sum((training$Price - mean(training$Price))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(model, evaluation)
eval_diff = eval_predictions - evaluation$Price
eval_tss = sum((evaluation$Price - mean(evaluation$Price))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
ggplot() + geom_point(aes(x = evaluation$Price, y = eval_predictions)) + geom_abline(slope = 1, intercept = 0, color = 'red')
ggplot() + geom_density(mapping = aes(x = eval_diff))
library('rpart')
library('rpart.plot')
cart = rpart(training$Price~., data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$Price
train_tss = sum((training$Price - mean(training$Price))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
eval_diff = eval_predictions - evaluation$Price
eval_tss = sum((evaluation$Price - mean(evaluation$Price))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
ggplot() + geom_point(aes(x = evaluation$Price, y = eval_predictions)) + geom_abline(slope = 1, intercept = 0, color = 'red')
ggplot() + geom_density(mapping = aes(x = eval_diff))
wages = read.csv('wages_hw.csv')
wages$Sector = as.factor(wages$Sector)
wages
eightypercent = nrow(wages) * .8
training = wages[sample(nrow(wages), eightypercent), ]
evaluation = setdiff(wages, training)
model = lm(avg_salary~Sector, data = training)
train_predictions = predict(model, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(model, evaluation)
model = lm(avg_salary~Sector, data = training)
train_predictions = predict(model, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(model, evaluation)
model = lm(avg_salary~Sector, data = training)
train_predictions = predict(model, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(model, evaluation)
wages = read.csv('wages_hw.csv')
wages$Sector = as.factor(wages$Sector)
wages = wages[wages$Sector == '-1',]
wages
eightypercent = nrow(wages) * .8
training = wages[sample(nrow(wages), eightypercent), ]
evaluation = setdiff(wages, training)
wages = read.csv('wages_hw.csv')
wages$Sector = as.factor(wages$Sector)
wages = wages[wages$Sector != '-1',]
wages
eightypercent = nrow(wages) * .8
training = wages[sample(nrow(wages), eightypercent), ]
evaluation = setdiff(wages, training)
model = lm(avg_salary~Sector, data = training)
train_predictions = predict(model, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(model, evaluation)
wages = read.csv('wages_hw.csv')
wages$Sector = as.factor(wages$Sector)
wages = wages[wages$Sector != '-1',]
wages
eightypercent = nrow(wages) * .8
training = wages[sample(nrow(wages), eightypercent), ]
evaluation = setdiff(wages, training)
model = lm(avg_salary~Sector, data = training)
train_predictions = predict(model, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(model, evaluation)
eval_diff = eval_predictions - evaluation$avg_salary
eval_tss = sum((evaluation$avg_salary - mean(evaluation$avg_salary))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
ggplotly(ggplot(mapping = aes(x = training$Sector, y = train_predictions)) + geom_bar(stat = 'identity'))
library('ggpmisc')
ggplot(data = wages, mapping = aes(x = Rating, y = avg_salary)) + geom_point() + geom_smooth(method = 'lm', show.legend = TRUE) + stat_poly_eq()
model = lm(avg_salary~Rating, data = training)
train_predictions = predict(model, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(model, evaluation)
eval_diff = eval_predictions - evaluation$avg_salary
eval_tss = sum((evaluation$avg_salary - mean(evaluation$avg_salary))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
ggplotly(ggplot(mapping = aes(x = training$Sector, y = train_predictions)) + geom_bar(stat = 'identity'))
model = lm(avg_salary~Sector+Rating, data = training)
train_predictions = predict(model, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(model, evaluation)
eval_diff = eval_predictions - evaluation$avg_salary
eval_tss = sum((evaluation$avg_salary - mean(evaluation$avg_salary))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
ggplotly(ggplot(mapping = aes(x = training$Sector, y = train_predictions)) + geom_bar(stat = 'identity'))
model = lm(avg_salary~., data = training)
train_predictions = predict(model, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(model, evaluation)
eval_diff = eval_predictions - evaluation$avg_salary
eval_tss = sum((evaluation$avg_salary - mean(evaluation$avg_salary))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
ggplotly(ggplot(mapping = aes(x = training$Sector, y = train_predictions)) + geom_bar(stat = 'identity'))
cart = rpart(training$avg_salary~Sector, data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$Price
train_tss = sum((training$Price - mean(training$Price))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
eval_diff = eval_predictions - evaluation$Price
eval_tss = sum((evaluation$Price - mean(evaluation$Price))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
cart = rpart(training$avg_salary~., data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$Price
train_tss = sum((training$Price - mean(training$Price))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
eval_diff = eval_predictions - evaluation$Price
eval_tss = sum((evaluation$Price - mean(evaluation$Price))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
cart = rpart(training$avg_salary~., data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
eval_diff = eval_predictions - evaluation$avg_salary
eval_tss = sum((evaluation$avg_salary - mean(evaluation$avg_salary))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
cart = rpart(avg_salary~., data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
eval_diff = eval_predictions - evaluation$avg_salary
eval_tss = sum((evaluation$avg_salary - mean(evaluation$avg_salary))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
cart = rpart(avg_salary~Sector, data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
eval_diff = eval_predictions - evaluation$avg_salary
eval_tss = sum((evaluation$avg_salary - mean(evaluation$avg_salary))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
cart = rpart(avg_salary~Sector, data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
eval_diff = eval_predictions - evaluation$avg_salary
eval_tss = sum((evaluation$avg_salary - mean(evaluation$avg_salary))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
rpart.plot(cart)
cart = rpart(avg_salary~., data = training)
train_predictions = predict(cart, training)
train_diff = train_predictions - training$avg_salary
train_tss = sum((training$avg_salary - mean(training$avg_salary))^2)
train_rss = sum(train_diff^2)
train_r2 = 1 - (train_rss / train_tss)
train_rmse = sqrt(mean(train_diff^2))
print(paste("Train R^2 =", train_r2))
print(paste("Train RMSE =", train_rmse))
eval_predictions = predict(cart, evaluation)
eval_diff = eval_predictions - evaluation$avg_salary
eval_tss = sum((evaluation$avg_salary - mean(evaluation$avg_salary))^2)
eval_rss = sum(eval_diff^2)
eval_r2 = 1 - (eval_rss / eval_tss)
eval_rmse = sqrt(mean(eval_diff^2))
print(paste("Eval R^2 =", eval_r2))
print(paste("Eval RMSE =", eval_rmse))
rpart.plot(cart)
ggplot(drug_deaths, aes(x = Year, y = Crude.Rate, group = State, color = State)) + geom_line()
ggplotly(ggplot(drug_deaths, aes(x = Year, y = Deaths, group = State, color = State)) + geom_line())
ggplotly(ggplot(drug_deaths, aes(x = Year, y = Crude.Rate, group = State, color = State)) + geom_line())
#length(which(college$control == "Private for-profit")) / length(college$control)
#xtabs(~ grad_100_value + control, data = college)
head(xtabs(~ grad_100_value + level, data = college))
pwd
pwd()
gwd()
getwd()
setwd("/Users/ethanbuckner/Development/dsproject/project1/DS4002-Project1")
setwd("/Users/ethanbuckner/Development/dsproject/project1/DS4002-Project1")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
house <- read.csv("DATA/house_total.csv")
house <- read.csv("/DATA/house_total.csv")
house <- read.csv("/DATA/house.csv")
house <- read.csv("/DATA/house.csv")
house <- read.csv("DATA/house.csv")
house <- read.csv("./DATA/house.csv")
house <- read.csv("./DATA/house.csv")
setwd("/Users/ethanbuckner/Development/dsproject/project1/DS4002-Project1/DATA")
house <- read.csv("house.csv")
house <- read.csv("house.csv")
library(tidyverse)
library(dplyr)
house <- read.csv("house.csv")
house <- read.csv("house.csv")
house <- read.csv("house.csv")
house <- read.csv("house.csv")
house <- read.csv("house.csv")
house <- read.csv("house.csv")
house <- read.csv("house.csv")
house <- read.csv("house.csv")
house <- read.csv("else.csv")
house <- read.csv("else.csv")
getwd()
house <- read.csv("/Users/ethanbuckner/Development/dsproject/project1/DS4002-Project1/DATA/house.csv")
house <- read.csv("/Users/ethanbuckner/Development/dsproject/project1/DS4002-Project1/DATA/house.csv")
house <- read.csv("/Users/ethanbuckner/Development/dsproject/project1/DS4002-Project1/DATA/house.csv")
house <- read.csv("/Users/ethanbuckner/Development/dsproject/project1/DS4002-Project1/DATA/house.csv")
head(house)
house1 <- house %>%
filter(party %in% c("DEMOCRAT", "REPUBLICAN"))
house1
house1 <- subset(house1, select = -c(state_fips, state_cen, state_ic, office, stage, runoff, special, writein, mode, unofficial, version, fusion_ticket))
house2 <-house1 %>%
group_by(year, state, district) %>%
summarize(
democrat_votes = sum(ifelse(party == "DEMOCRAT", candidatevotes, 0)),
republican_votes = sum(ifelse(party == "REPUBLICAN", candidatevotes, 0)),
totalvotes = totalvotes,
democrat_candidate = first(candidate[party == "DEMOCRAT"]),
republican_candidate =first(candidate[party == "REPUBLICAN"])
) %>%
ungroup()
house_unique <- house2 %>%
distinct()
house_unique <- house2 %>%
distinct()
house_unique
house_unique <- house2 %>%
distinct() %>%
filter(democrat_votes*10 > republican_votes & republican_votes*10 > democrat_votes) # Ensure both candidates received votes
house_unique
write.csv(house_unique, "house_clean.csv", row.names = FALSE)
dems = read.csv("democrats.csv")
dems = read.csv("/Users/ethanbuckner/Development/dsproject/project1/DS4002-Project1/DATA/democrats.csv")
everyone_else = read.csv("/Users/ethanbuckner/Development/dsproject/project1/DS4002-Project1/DATA/else.csv")
head(dems)
